{{define "queryCodePgx"}}
{{range .GoQueries}}
{{- /*gotype:github.com/sqlc-dev/sqlc-gen-go/internal.Query*/ -}}
{{if $.OutputQuery .SourceName}}
{{if and (ne .Cmd ":copyfrom") (ne (hasPrefix .Cmd ":batch") true)}}
const {{.ConstantName}} = {{$.Q}}-- name: {{.MethodName}} {{.Cmd}}
{{ if .Paginated}}{{escape .SQLPaginated}}{{ else }}{{escape .SQL}}{{end -}}
{{$.Q}}
{{ if .Paginated }}
	{{- if not .CursorPagination }}
const {{.ConstantName}}Total = {{$.Q}}
{{escape .SQLTotal}}
{{$.Q}}
	{{- end -}}
{{- end -}}
{{end}}

{{if ne (hasPrefix .Cmd ":batch") true}}
{{if .Arg.EmitStruct}}
type {{.Arg.Type}} struct { {{- range .Arg.Struct.Fields}}
  {{.Name}} {{.Type}} {{if .Tag}}{{$.Q}}{{.Tag}}{{$.Q}}{{end}}
  {{- end}}
}
{{end}}

{{if .Ret.EmitStruct}}
type {{.Ret.Type}} struct { {{- range .Ret.Struct.Fields}}
  {{.Name}} {{.Type}} {{if .Tag}}{{$.Q}}{{.Tag}}{{$.Q}}{{end}}
  {{- end}}
}
{{end}}
{{end}}

{{if eq .Cmd ":one"}}
{{range .Comments}}//{{.}}
{{end -}}
{{- if $.EmitMethodsWithDBArgument -}}
func (q *Queries) {{.MethodName}}(ctx context.Context, db DBTX, {{.Arg.Pair}}) ({{.Ret.DefineType}}, error) {
	row := db.QueryRow(ctx, {{.ConstantName}}, {{.Arg.Params}})
{{- else -}}
func (q *Queries) {{.MethodName}}(ctx context.Context, {{.Arg.Pair}}) ({{.Ret.DefineType}}, error) {
	row := q.db.QueryRow(ctx, {{.ConstantName}}, {{.Arg.Params}})
{{- end}}
	{{- if or (ne .Arg.Pair .Ret.Pair) (ne .Arg.DefineType .Ret.DefineType) }}
	var {{.Ret.Name}} {{.Ret.Type}}
	{{- end}}
	err := row.Scan({{.Ret.Scan}})
	return {{.Ret.ReturnName}}, err
}
{{end}}

{{if eq .Cmd ":many"}}
{{range .Comments}}//{{.}}
{{end -}}
{{- if $.EmitMethodsWithDBArgument -}}
func (q *Queries) {{.MethodName}}(ctx context.Context, db DBTX, {{.Arg.Pair}}) ({{.ReturnedType}}, error) {
	{{- template "decodeCursor" . -}}
	rows, err := db.Query(ctx, {{.ConstantName}}, {{ .QueryParams}})
{{- else -}}
func (q *Queries) {{.MethodName}}(ctx context.Context, {{.Arg.Pair}}) ({{.ReturnedType}}, error) {
	{{- template "decodeCursor" . }}
	rows, err := q.db.Query(ctx, {{.ConstantName}}, {{ .QueryParams}})
{{- end}}
	if err != nil {
		return {{ if .Paginated}}{{.ReturnedType}}{}{{ else }}nil{{ end }}, err
	}
	defer rows.Close()
	{{- if $.EmitEmptySlices}}
	items := []{{.Ret.DefineType}}{}
	{{else}}
	var items []{{.Ret.DefineType}}
	{{end -}}
	for rows.Next() {
		var {{.Ret.Name}} {{.Ret.Type}}
		if err := rows.Scan({{.Ret.Scan}}); err != nil {
			return {{ if .Paginated}}{{.ReturnedType}}{}{{ else }}nil{{ end }}, err
		}
		items = append(items, {{.Ret.ReturnName}})
	}
	if err := rows.Err(); err != nil {
		return {{ if .Paginated}}{{.ReturnedType}}{}{{ else }}nil{{ end }}, err
	}
{{- if .Paginated}}
	{{- if .CursorPagination }}
		connection := {{.ReturnedType}}{}
		connection.Edges = make([]{{.Ret.DefineType}}Edge, len(items))
		hasNext := false
		if len(items) > int({{.Arg.Name}}.Limit) {
			hasNext = true
			items = items[:len(items)-1]
		}
		hasPrevious := false
		if {{.Arg.Name}}.Cursor != "" {
			hasPrevious = true
		}
		connection.PageInfo = PageInfo{
			HasNextPage: hasNext,
			HasPreviousPage: hasPrevious,
		}
		for i, item := range items {
			cursor := {{lowerTitle .Ret.Struct.Name}}Cursor {
				{{- range .CursorFields}}
					{{.Field.Name}}: item.{{.Field.Name}},
				{{- end}}
			}
			cursorJson, err := json.Marshal(cursor);
			if err != nil {
			return {{.ReturnedType}}{}, errors.New("failed to unmarshal a cursor")
			}
			cursorValue := base64.StdEncoding.EncodeToString(cursorJson)
			if i == 0 {
				connection.PageInfo.StartCursor = cursorValue
			}
			if i == len(items) - 1 {
				connection.PageInfo.EndCursor = cursorValue
			}
			connection.Edges[i] = {{.Ret.DefineType}}Edge{
				Node: item,
				Cursor: cursorValue,
			}
		}
		return connection, nil
	{{- else }}
		var total int
		if err := q.db.QueryRow(ctx, {{.ConstantName}}Total, {{.Arg.ParamsTotal}}).Scan(&total); err != nil {
			return {{.Ret.DefineType}}Page{}, err
		}
		limit := int({{.Arg.Name}}.Limit)
		if limit > len(items) {
			limit = len(items)
		}
		return {{.ReturnedType}}{Items: items[:limit], HasNext: len(items) > int({{.Arg.Name}}.Limit), Total: total}, nil
	{{- end}}
{{- else }}
	return items, nil
{{- end}}
}
{{end}}

{{if eq .Cmd ":exec"}}
{{range .Comments}}//{{.}}
{{end -}}
{{- if $.EmitMethodsWithDBArgument -}}
func (q *Queries) {{.MethodName}}(ctx context.Context, db DBTX, {{.Arg.Pair}}) error {
	_, err := db.Exec(ctx, {{.ConstantName}}, {{.Arg.Params}})
{{- else -}}
func (q *Queries) {{.MethodName}}(ctx context.Context, {{.Arg.Pair}}) error {
	_, err := q.db.Exec(ctx, {{.ConstantName}}, {{.Arg.Params}})
{{- end}}
	return err
}
{{end}}

{{if eq .Cmd ":execrows"}}
{{range .Comments}}//{{.}}
{{end -}}
{{if $.EmitMethodsWithDBArgument -}}
func (q *Queries) {{.MethodName}}(ctx context.Context, db DBTX, {{.Arg.Pair}}) (int64, error) {
	result, err := db.Exec(ctx, {{.ConstantName}}, {{.Arg.Params}})
{{- else -}}
func (q *Queries) {{.MethodName}}(ctx context.Context, {{.Arg.Pair}}) (int64, error) {
	result, err := q.db.Exec(ctx, {{.ConstantName}}, {{.Arg.Params}})
{{- end}}
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
{{end}}

{{if eq .Cmd ":execresult"}}
{{range .Comments}}//{{.}}
{{end -}}
{{- if $.EmitMethodsWithDBArgument -}}
func (q *Queries) {{.MethodName}}(ctx context.Context, db DBTX, {{.Arg.Pair}}) (pgconn.CommandTag, error) {
	return db.Exec(ctx, {{.ConstantName}}, {{.Arg.Params}})
{{- else -}}
func (q *Queries) {{.MethodName}}(ctx context.Context, {{.Arg.Pair}}) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, {{.ConstantName}}, {{.Arg.Params}})
{{- end}}
}
{{end}}


{{end}}
{{end}}
{{end}}


{{ define "decodeCursor"}}
	{{- /*gotype:github.com/sqlc-dev/sqlc-gen-go/internal.Query*/ -}}
	{{- if .Paginated}}
	{{- if .CursorPagination }}
	var cursor {{lowerTitle .Ret.Struct.Name}}Cursor
	if {{ .Arg.Name}}.Cursor != "" {
	cursorDec, err := base64.StdEncoding.DecodeString({{ .Arg.Name}}.Cursor)
	if err != nil {
	return {{.ReturnedType}}{}, errors.New("failed to decode a cursor")
	}
	if err := json.Unmarshal(cursorDec, &cursor); err != nil {
	return {{.ReturnedType}}{}, errors.New("failed to unmarshal a cursor")
	}
	}
		{{- end -}}
	{{- end -}}
{{end}}
